# This is a basic workflow to help you get started with Actions

name: Deploy Dokcer Image

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - "src/app/**"
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4

      # JDK 설치
      - name: Setup JDK
        uses: actions/setup-java@v5.0.0  
        with:
          distribution: 'temurin'
          java-version: 21

      # 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle로 빌드
      - name: Build to Gradle
        run: ./gradlew clean build -x test --no-daemon
            
      # You may pin to the exact commit or the version.
      # uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
      - name: Login Docker
        uses: docker/login-action@v3.6.0
        with:
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKERHUB_PUSH_PASSWORD }}
  
      # DockerHub Push
      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend
          
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # EC2가 이미지 pull 후 컨테이너 재실행
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DUCKERHUB_PASSWORD }}
            cd todo
            sudo docker-compose stop
            sudo docker-compose rm -f
            sudo docker image rm ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend
            sudo docker-compose up -d
